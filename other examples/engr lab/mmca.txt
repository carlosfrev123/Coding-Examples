Step 1: Create User.java and add below code.

package com.chegg.mar12c.user;

import java.util.ArrayList;
import java.util.Iterator;

public class User {
        private String userName;
        private ArrayList<Meme> memesCreated;
        private ArrayList<Meme> memesViewed;

        public String getUserName() {
                return userName;
        }

        public void setUserName(String userName) {
                this.userName = userName;
        }

        public ArrayList getMemesCreated() {
                return memesCreated;
        }

        public void setMemesCreated(ArrayList memesCreated) {
                this.memesCreated = memesCreated;
        }

        public ArrayList getMemesViewed() {
                return memesViewed;
        }

        public void setMemesViewed(ArrayList memesViewed) {
                this.memesViewed = memesViewed;
        }

        public void rateMeme(Meme meme, int rating) {
                Rating ratingObj = new Rating(rating, this);
                ratingObj.setScore(rating);
                meme.addRating(ratingObj);
        }

        public Meme createMeme(BackgroundImage image, String caption) {
                Meme meme = new Meme(this, image, caption);
                return meme;
        }

        public boolean deleteMeme(Meme meme) {
                Iterator<Meme> createdMemeIterator = memesCreated.iterator();
                while(createdMemeIterator.hasNext()) {
                        if (createdMemeIterator.next() == meme) {
                                createdMemeIterator.remove();
                        }
                }
                Iterator<Meme> viewedMemeIterator = memesViewed.iterator();
                while(viewedMemeIterator.hasNext()) {
                        if (viewedMemeIterator.next() == meme) {
                                viewedMemeIterator.remove();
                        }
                }
                return true;
        }

        public void shareMeme(Meme meme, Feed feed) {
                feed.getMemes().add(meme);
        }

        public void rateNextMemeFromFeed(Feed feed, int ratingScore) {
                Rating ratingObj = new Rating(ratingScore, this);
                ratingObj.setScore(ratingScore);
        }

        public double calculateReputation() {
                double result = 0.0;
                return result;
        }

        @Override
        public String toString() {
                return "User [userName=" + userName + ", memesCreated=" + memesCreated + ", memesViewed=" + memesViewed + "]";
        }

        @Override
        public int hashCode() {
                final int prime = 31;
                int result = 1;
                result = prime * result + ((memesCreated == null) ? 0 : memesCreated.hashCode());
                result = prime * result + ((memesViewed == null) ? 0 : memesViewed.hashCode());
                result = prime * result + ((userName == null) ? 0 : userName.hashCode());
                return result;
        }

        @Override
        public boolean equals(Object obj) {
                return super.equals(obj);
        }

}
Step 2: Create Meme.java and add below code.

package com.chegg.mar12c.user;

import java.util.Arrays;
import java.util.List;

public class Meme {
        private User creator;
        private BackgroundImage backgroundImage;
        private Rating[] ratings;
        private String caption;
        private String captionVerticalAlign;
        private boolean shared;
        static int elementsCountInRatingArr = 0;
        
        public Meme(User creator, BackgroundImage backgroundImage, String caption) {
                super();
                this.creator = creator;
                this.backgroundImage = backgroundImage;
                this.caption = caption;
                this.ratings = new Rating[10];
                this.captionVerticalAlign = "bottom";
        }

        public User getCreator() {
                return creator;
        }

        public void setCreator(User creator) {
                this.creator = creator;
        }

        public BackgroundImage getBackgroundImage() {
                return backgroundImage;
        }

        public void setBackgroundImage(BackgroundImage backgroundImage) {
                this.backgroundImage = backgroundImage;
        }

        public Rating[] getRatings() {
                return ratings;
        }

        public void setRatings(Rating[] ratings) {
                this.ratings = ratings;
        }

        public String getCaption() {
                return caption;
        }

        public void setCaption(String caption) {
                this.caption = caption;
        }

        public String getCaptionVerticalAlign() {
                return captionVerticalAlign;
        }

        public boolean setCaptionVerticalAlign(String captionVerticalAlign) {
                String[] allowedPositions = {"top", "middle", "bottom"};
                List<String> allowedPositionsList = Arrays.asList(allowedPositions);
                if (allowedPositionsList.contains(captionVerticalAlign)) {
                        this.captionVerticalAlign = captionVerticalAlign;       
                        return true;
                }
                return false;
        }

        @Override
        public int hashCode() {
                final int prime = 31;
                int result = 1;
                result = prime * result + ((backgroundImage == null) ? 0 : backgroundImage.hashCode());
                result = prime * result + ((caption == null) ? 0 : caption.hashCode());
                result = prime * result + ((captionVerticalAlign == null) ? 0 : captionVerticalAlign.hashCode());
                result = prime * result + ((creator == null) ? 0 : creator.hashCode());
                result = prime * result + Arrays.hashCode(ratings);
                result = prime * result + (shared ? 1231 : 1237);
                return result;
        }

        @Override
        public boolean equals(Object obj) {
                if (this == obj)
                        return true;
                if (obj == null)
                        return false;
                if (getClass() != obj.getClass())
                        return false;
                Meme other = (Meme) obj;
                if (backgroundImage == null) {
                        if (other.backgroundImage != null)
                                return false;
                } else if (!backgroundImage.equals(other.backgroundImage))
                        return false;
                if (caption == null) {
                        if (other.caption != null)
                                return false;
                } else if (!caption.equals(other.caption))
                        return false;

                if (creator == null) {
                        if (other.creator != null)
                                return false;
                } else if (!creator.equals(other.creator))
                        return false;

                return true;
        }

        public boolean isShared() {
                return shared;
        }

        public void setShared(boolean shared) {
                this.shared = shared;
        }

        public boolean addRating(Rating rating) {
                if (elementsCountInRatingArr >= ratings.length) {
                        for (int i=0; i<ratings.length-1; i++) {
                                ratings[i] = ratings[i+1];
                        }
                        ratings[ratings.length-1] = rating;
                } else {
                        ratings[elementsCountInRatingArr++] = rating;
                }
                return true;
        }

        public double calculateOverallRating() {
                double result = 0;              
                for (int i=0; i<elementsCountInRatingArr; i++) {
                        Rating rating = ratings[i];
                        result += rating.getScore();
                }
                return result;
        }

        @Override
        public String toString() {
                int positiveRatings = getPositiveRatings();
                int negativeRatings = getNegativeRatings();
                return backgroundImage + " '" + caption + "' overallrating [+1: "+positiveRatings+", -1 "+negativeRatings+"]";
        }

        private int getNegativeRatings() {
                int result = 0;
                for (Rating rating: ratings) {
                        if (rating.getScore() == -1) {
                                result++;
                        }
                }
                return result;
        }

        private int getPositiveRatings() {
                int result = 0;
                for (Rating rating: ratings) {
                        if (rating.getScore() == +1) {
                                result++;
                        }
                }
                return result;
        }

}
Step 3: Create BackgroundImage.java and add below code.

package com.chegg.mar12c.user;

public class BackgroundImage {
        private String imageFileName;
        private String title;
        private String description;

        public BackgroundImage(String imageFileName, String title, String description) {
                super();
                this.imageFileName = imageFileName;
                this.title = title;
                this.description = description;
        }

        public String getImageFileName() {
                return imageFileName;
        }

        public void setImageFileName(String imageFileName) {
                this.imageFileName = imageFileName;
        }

        public String getTitle() {
                return title;
        }

        public void setTitle(String title) {
                this.title = title;
        }

        public String getDescription() {
                return description;
        }

        public void setDescription(String description) {
                this.description = description;
        }

        @Override
        public String toString() {
                return title + " <" + description + ">";
        }

        @Override
        public int hashCode() {
                final int prime = 31;
                int result = 1;
                result = prime * result + ((description == null) ? 0 : description.hashCode());
                result = prime * result + ((imageFileName == null) ? 0 : imageFileName.hashCode());
                result = prime * result + ((title == null) ? 0 : title.hashCode());
                return result;
        }

        @Override
        public boolean equals(Object obj) {
                if (this == obj)
                        return true;
                if (obj == null)
                        return false;
                if (getClass() != obj.getClass())
                        return false;
                BackgroundImage other = (BackgroundImage) obj;
                if (description == null) {
                        if (other.description != null)
                                return false;
                } else if (!description.equals(other.description))
                        return false;
                if (imageFileName == null) {
                        if (other.imageFileName != null)
                                return false;
                } else if (!imageFileName.equals(other.imageFileName))
                        return false;
                if (title == null) {
                        if (other.title != null)
                                return false;
                } else if (!title.equals(other.title))
                        return false;
                return true;
        }

}
Step 4: Create Rating.java and add below code.

package com.chegg.mar12c.user;

import java.util.Arrays;
import java.util.List;

public class Rating {
        private int score;
        private User user;

        public Rating(int score, User user) {
                super();
                this.score = score;
                this.user = user;
        }

        public int getScore() {
                return score;
        }

        public boolean setScore(int score) {
                Integer[] allowedScores = {-1, 0, 1};
                List<Integer> allowedScoresList = Arrays.asList(allowedScores);
                if (allowedScoresList.contains(score)) {
                        this.score = score;     
                        return true;
                } 
                this.score = 0;
                return false;           
        }

        public User getUser() {
                return user;
        }

        public void setUser(User user) {
                this.user = user;
        }

        @Override
        public String toString() {
                if (score == 0) {
                        return "Rating was a pass";
                } else if (score > 0) {
                        return "Rating was an upvote";
                } else {
                        return "Rating was a downvote";
                }
        }

        @Override
        public int hashCode() {
                final int prime = 31;
                int result = 1;
                result = prime * result + score;
                result = prime * result + ((user == null) ? 0 : user.hashCode());
                return result;
        }

        @Override
        public boolean equals(Object obj) {
                if (this == obj)
                        return true;
                if (obj == null)
                        return false;
                if (getClass() != obj.getClass())
                        return false;
                Rating other = (Rating) obj;
                if (score != other.score)
                        return false;
                if (user == null) {
                        if (other.user != null)
                                return false;
                } else if (!user.equals(other.user))
                        return false;
                return true;
        }

}
Step 5: Create Feed.java and add below code.

package com.chegg.mar12c.user;

import java.util.ArrayList;

public class Feed {
        private ArrayList<Meme> memes;

        public ArrayList<Meme> getMemes() {
                return memes;
        }

        public void setMemes(ArrayList<Meme> memes) {
                this.memes = memes;
        }

        public Meme getNewMeme(User user) {
                Meme meme = new Meme(user, null, null);
                return meme;
        }

        @Override
        public String toString() {
                return "Feed [memes=" + memes + "]";
        }

}
Step 6: Create TestMain.java and add below code.

package com.chegg.mar12c.user;

import java.util.ArrayList;

public class TestMain {

        public static void main(String[] args) {
                
                User user = new User();
                user.setUserName("TestUserName");
                
                BackgroundImage backgroundImage = new BackgroundImage("TestImage1", "TestTitle1", "TestDescription1");
                
                Meme meme = new Meme(user, backgroundImage, "TestCaption1");
                
                Rating rating1 = new Rating(1, user);
                boolean isScoredAdded = rating1.setScore(-1);
                System.out.println("isScoredAdded: "+isScoredAdded);            
                boolean isRatingAdded = meme.addRating(rating1);
                System.out.println("isRatingAdded: "+isRatingAdded);
                double overAllRating = meme.calculateOverallRating();
                System.out.println("overAllRating: "+overAllRating);
                boolean isCaptionAligned = meme.setCaptionVerticalAlign("top");
                System.out.println("isCaptionAligned: "+isCaptionAligned);
                
                
                Rating rating2 = new Rating(0, user);
                isScoredAdded = rating2.setScore(1);
                isRatingAdded = meme.addRating(rating2);
                overAllRating = meme.calculateOverallRating();
                
                
                Rating rating3 = new Rating(0, user);
                isScoredAdded = rating3.setScore(0);    
                isRatingAdded = meme.addRating(rating3);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating4 = new Rating(0, user);
                isScoredAdded = rating4.setScore(1);    
                isRatingAdded = meme.addRating(rating4);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating5 = new Rating(0, user);
                isScoredAdded = rating5.setScore(1);    
                isRatingAdded = meme.addRating(rating5);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating6 = new Rating(0, user);
                isScoredAdded = rating6.setScore(-1);   
                isRatingAdded = meme.addRating(rating6);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating7 = new Rating(0, user);
                isScoredAdded = rating7.setScore(1);    
                isRatingAdded = meme.addRating(rating7);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating8 = new Rating(0, user);
                isScoredAdded = rating8.setScore(0);    
                isRatingAdded = meme.addRating(rating8);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating9 = new Rating(0, user);
                isScoredAdded = rating9.setScore(1);    
                isRatingAdded = meme.addRating(rating9);
                overAllRating = meme.calculateOverallRating();
                
                Rating rating10 = new Rating(0, user);
                isScoredAdded = rating10.setScore(-1);  
                isRatingAdded = meme.addRating(rating10);
                overAllRating = meme.calculateOverallRating();
                
                System.out.println("******************************");
                int index = 1;
                System.out.println("Before 10 elements: ");
                for (Rating rating: meme.getRatings()) {
                        System.out.println((index++)+"."+rating);
                }
                
                Rating rating11 = new Rating(0, user);
                isScoredAdded = rating11.setScore(-1);  
                isRatingAdded = meme.addRating(rating11);
                overAllRating = meme.calculateOverallRating();
                
                System.out.println("******************************");
                index = 1;
                System.out.println("After 11 elements: ");
                for (Rating rating: meme.getRatings()) {
                        System.out.println((index++)+"."+rating);
                }
                //First downvoted rating got discarded as we added 11th element.
                
                Rating rating12 = new Rating(0, user);
                isScoredAdded = rating12.setScore(5);
                System.out.println("isScoredAdded (expected FALSE): "+isScoredAdded);                   //Supposed to be false as we tried setting score 5 (which is not in -1, 0, +1)
                isRatingAdded = meme.addRating(rating12);
                overAllRating = meme.calculateOverallRating();
                
                ArrayList<Meme> memesList = new ArrayList<Meme>();
                memesList.add(meme);
                user.setMemesCreated(memesList);
                user.setMemesViewed(memesList);
                
                System.out.println(user);
                System.out.println(backgroundImage);
                System.out.println(meme);
                
        }
}