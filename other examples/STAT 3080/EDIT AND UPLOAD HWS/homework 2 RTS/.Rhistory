unlink("hw2jandeadline_cache", recursive = TRUE)
library(knitr)
knit2pdf("file")
library("knitr"")
knit2pdf("file")
library("knitr"")
knit2pdf("hw2jandeadline.Rmd")
library("knitr")
knit2pdf("hw2jandeadline.Rmd")
knit2pdf("hw2jandeadline.rmd")
knit2pdf("hw2jandeadline")
knit2pdf("hw2jandeadline.rmd")
library(car)
data(Davis)
weight.metric<-Davis[,c("wtdes","wtdesrep")]
# Load the car package
library(car)
# Load the Davis data set from the car package
data("Davis")
# Subset the recorded weight and reported weight columns and save them in a data frame named weight.metric
weight.metric <- Davis[, c("rwt", "pwt")]
# Load the car package
library(car)
# Load the Davis data set from the car package
data("Davis")
# Subset the recorded weight and reported weight columns and save them in a data frame named weight.metric
weight.metric <- Davis[, c("rwt", "pwt")]
library(car)
data(Davis)
weight.metric <- Davis[, c("recorded_weight_kg", "reported_weight_kg")]
library(dplyr)
weight.metric <- select(Davis, recorded_weight_kg, reported_weight_kg)
library(car)
library(dplyr)
weight.metric <- select(Davis, recorded_weight_kg, reported_weight_kg)
library(car)
colnames(Davis)
library(car)
data(Davis)
weight.metric <- Davis[, c("wt", "hgt")]
View(commutes)
View(Davis)
library(car)
data(Davis)
weight.metric <- Davis[, c("weight", "repwt")]
head(weight.metric)
height.metric<-Davis[,c("height","repht")]
head(height.metric)
library("knitr")
knit2pdf("hw2jandeadline.rmd")
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(mean, sd, 23))
ztest<-function(sample_size){
sample<-rnorm(sample_size,mean,sd)
z<-(mean(sample)-mean)/(sd/sqrt(sample_size))
p<-pnorm(abs(z),lower.tail=FALSE)
p<0.05
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(mean, sd, 23))
# Calculate proportion of tests that reject the null hypothesis
mean(results)
print(mean)
ztest<-function(sample_size){
sample<-rnorm(sample_size,mean,sd)
z<-(mean(sample)-mean)/(sd/sqrt(sample_size))
p<-pnorm(abs(z),lower.tail=FALSE)
p<0.05
}
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(mean, sd, 23))
mean<-109.8
sd<-7.4
ztest<-function(sample_size){
sample<-rnorm(sample_size,mean,sd)
z<-(mean(sample)-mean)/(sd/sqrt(sample_size))
p<-pnorm(abs(z),lower.tail=FALSE)
p<0.05
}
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(mean, sd, 23))
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(23, mean, sd))
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(23, mean, sd))
# Execute function 10,000 times using a sample size of 23
results <- replicate(10000, ztest(23))
# Calculate proportion of tests that reject the null hypothesis and print
print(mean(results))
ztest_proportion<-function(sample_size){
replicate(10000,ztest(sample_size))%>%mean()
}
ztest_proportion(8)
ztest_proportion(23)
ztest_proportion(52)
ztest_proportion<-function(sample_size){
replicate(10000,ztest(sample_size))%>%mean()
}
ztest_proportion(8)
ztest_proportion(23)
ztest_proportion(52)
ztest_proportion<-function(sample_size){
replicate(10000,ztest(sample_size))%>%mean()
}
ztest_proportion(8)
ztest_proportion(23)
ztest_proportion(52)
proportion_rejecting_null <- function(mean, sd, sample_size, num_tests) {
# Execute z-test function num_tests times using a sample size of sample_size
results <- replicate(num_tests, z_test(mean, sd, sample_size))
# Calculate proportion of tests that reject the null hypothesis
return(mean(results))
}
# Execute function for sample sizes 8, 23, and 52
proportion_rejecting_null(mean, sd, 8, 10000)
proportion_rejecting_null <- function(mean, sd, sample_size, num_tests) {
# Execute z-test function num_tests times using a sample size of sample_size
results <- replicate(num_tests, ztest(sample_size))
# Calculate proportion of tests that reject the null hypothesis
return(mean(results))
}
# Execute function for sample sizes 8, 23, and 52
proportion_rejecting_null(mean, sd, 8, 10000)
proportion_rejecting_null(mean, sd, 23, 10000)
proportion_rejecting_null(mean, sd, 52, 10000)
# Generate sequence of sample sizes from 3 to 52
sample_sizes <- 3:52
# Execute function for each sample size in sequence
proportions <- lapply(sample_sizes, function(x) proportion_rejecting_null(mean, sd, x, 10000))
# View results
proportions
